#user  nobody;
worker_processes  1;

error_log  /tmp/logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    init_by_lua_block {
        function find_yogi (program, attribute_id, value)
            local http = require "resty.http"
            local httpc = http.new()
            local cjson = require "cjson"
            local res, err = httpc:request_uri("http://127.0.0.1:8080/api/trackedEntityInstances/query.json?program=" .. program .. "&ouMode=ACCESSIBLE&filter=".. attribute_id ..":eq:" .. value, {
                            method = "GET",
                            body = request_body,
                            headers = {
                                ["Content-Type"] = "application/json",
                                ["Authorization"] = "Basic YWRtaW46ZGlzdHJpY3Q="
                            },
                        })
            if err == nil then
                if res.status == 200 then
                    local payload = cjson.decode(res.body)
                    if payload.height == 1 then
                        return cjson.encode({trackedEntityInstance = payload.rows[1][1]})
                    else
                        return false, "More results than expected. Found : " .. payload.height
                    end
                else
                    return false, "Unknown status: " .. res.status
                end
            else
                return false, err
            end
        end
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /api/fileResources {
            proxy_pass http://127.0.0.1:8080/api/fileResources;
            proxy_set_header Authorization "Basic YWRtaW46ZGlzdHJpY3Q=";
            add_header "Access-Control-Allow-Methods" "POST";
            add_header "Access-Control-Allow-Origin" "*";
            add_header "Access-Control-Allow-Headers" "Content-Type";
        }

        location /api/checkExists {
            content_by_lua_block {
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "GET"
                ngx.header["Access-Control-Allow-Headers"] = "Content-Type"

                local query_string = ngx.req.get_uri_args()

                if query_string["program"] == nil or query_string["attribute"] == nil or  query_string["value"] == nil then
                    return ngx.exit(400)
                end

                local res, err = find_yogi(query_string["program"], query_string["attribute"], query_string["value"])

                if err == nil
                then
                    ngx.status = 200
                    ngx.say(res)
                else
                    return ngx.exit(404)
                end
            }
        }

        location /api/submitForm {
            resolver 8.8.4.4;
            content_by_lua_block {
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "POST"
                ngx.header["Access-Control-Allow-Headers"] = "Content-Type"

                local http = require "resty.http"
                local httpc = http.new()
                local reqType = ngx.var.request_method
                if reqType == "POST"
                then
                    ngx.req.read_body()
                    local request_body = ngx.req.get_body_data()
                    local res, err = httpc:request_uri("http://127.0.0.1:8080/api/tracker.json?async=false", {
                        method = "POST",
                        body = request_body,
                        headers = {
                            ["Content-Type"] = "application/json",
                            ["Authorization"] = "Basic YWRtaW46ZGlzdHJpY3Q="
                        },
                    })
                    if err == nil
                    then
                        ngx.status = res.status
                        ngx.say(res.body)
                    else
                        return ngx.exit(res.status)
                    end
                elseif reqType == "OPTIONS"
                then    
                    ngx.status = ngx.HTTP_OK
                else
                    ngx.status = ngx.HTTP_NOT_ALLOWED
                    ngx.say("Not allowed")
                end
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
