#user  nobody;
worker_processes  1;

error_log  /tmp/logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /api/submitForm/ {
            resolver 8.8.4.4;
            content_by_lua_block {
                ngx.header["Access-Control-Allow-Origin"] = "*"
                ngx.header["Access-Control-Allow-Methods"] = "POST"
                ngx.header["Access-Control-Allow-Headers"] = "Content-Type"

                local http = require "resty.http"
                local httpc = http.new()
                local reqType = ngx.var.request_method
                if reqType == "POST"
                then
                    ngx.req.read_body()
                    local request_body = ngx.req.get_body_data()
                    local res, err = httpc:request_uri("http://127.0.0.1:8080/api/tracker.json?async=false", {
                        method = "POST",
                        body = request_body,
                        headers = {
                            ["Content-Type"] = "application/json",
                            ["Authorization"] = "Basic YWRtaW46ZGlzdHJpY3Q="
                        },
                    })
                    if err == nil
                    then
                        ngx.status = res.status
                        ngx.say(res.body)
                    else
                        return ngx.exit(res.status)
                    end
                elseif reqType == "OPTIONS"
                then    
                    ngx.status = ngx.HTTP_OK
                else
                    ngx.status = ngx.HTTP_NOT_ALLOWED
                    ngx.say(reqType)
                end
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
